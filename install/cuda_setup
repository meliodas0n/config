#!/usr/bin/bash

CUDNN_FILE="cudnn-linux-x86_64-8.9.7.29_cuda11-archive.tar.xz"

cuda_install() {
  echo "Cuda Installation Started"
  wget https://developer.download.nvidia.com/compute/cuda/11.8.0/local_installers/cuda_11.8.0_520.61.05_linux.run
  sudo sh cuda_11.8.0_520.61.05_linux.run
  echo "Cuda Installation Completed"
}

cudnn_install() {
  echo "Cudnn Installation Started"
  echo "Please go to https://developer.nvidia.com/rdp/cudnn-archive and download cudnn 11.8(cudnn-linux-x86_64-8.9.7.29_cuda11-archive.tar.xz) manually and place it in $HOME/Downloads"
  echo "If downloaded please press y"
  read -p "Press [y] If download complete : " inp
  if [ "$inp" = "y" ]; then
    cd $HOME/Downloads
    if [ -f $CUDNN_FILE ]; then
      tar -xf cudnn-linux-x86_64-8.9.7.29_cuda11-archive.tar.xz
      mv cudnn-linux-x86_64-8.9.7.29_cuda11-archive cudnn
      sudo cp cudnn/include/cudnn*.h /usr/local/cuda-11.8/include
      sudo cp -P cudnn/lib/libcudnn* /usr/local/cuda-11.8/lib64
      sudo chmod a+r /usr/local/cuda-11.8/include/cudnn*.h /usr/local/cuda-11.8/lib64/libcudnn*
      sudo apt-get update && sudo apt full-upgrade
      echo "Cudnn Installation Completed"
    else
      echo "file $CUDNN_FILE not found!"
      exit 1
    fi
  fi
}

cuda_install12() {
  wget https://developer.download.nvidia.com/compute/cuda/repos/wsl-ubuntu/x86_64/cuda-wsl-ubuntu.pin
  sudo mv cuda-wsl-ubuntu.pin /etc/apt/preferences.d/cuda-repository-pin-600
  wget https://developer.download.nvidia.com/compute/cuda/12.6.2/local_installers/cuda-repo-wsl-ubuntu-12-6-local_12.6.2-1_amd64.deb
  sudo dpkg -i cuda-repo-wsl-ubuntu-12-6-local_12.6.2-1_amd64.deb
  sudo cp /var/cuda-repo-wsl-ubuntu-12-6-local/cuda-*-keyring.gpg /usr/share/keyrings/
  sudo apt-get update
  sudo apt-get -y install cuda-toolkit-12-6
}

cudnn_install12() {
  wget https://developer.download.nvidia.com/compute/cudnn/9.4.0/local_installers/cudnn-local-repo-ubuntu2404-9.4.0_1.0-1_amd64.deb
  sudo dpkg -i cudnn-local-repo-ubuntu2404-9.4.0_1.0-1_amd64.deb
  sudo cp /var/cudnn-local-repo-ubuntu2404-9.4.0/cudnn-*-keyring.gpg /usr/share/keyrings/
  sudo apt-get update
  sudo apt-get -y install cudnn
  sudo apt-get -y install cudnn-cuda-12
}

package_install() {
  echo "Started Installing Libraries"
  sudo apt-get install libfreeimage3 libfreeimage-dev
  echo "Completed Install Libraries"
}

verify_cudnn_install() {
  cp -r /usr/src/cudnn_samples_v9/ $HOME/Downloads
  cd $HOME/Downloads/cudnn_samples_v9/mnistCUDNN && make clean && make
  ./mnistCUDNN > execute.log
  passed=$(cat execute.log | tail -n 1)
  if [ "$passed" = "Test passed!" ]; then
    echo "Tests for CUDNN Install has passed!"
  else
    echo "Tests for CUDNN Failed!"
    echo "Please see below log and do the needful"
    echo "Once fixed please pass '1' as argument to the script to test."
    echo "$compile"
  fi
}

python_setup() {
  echo "Installing tensorflow"
   if [ $(pip3 list | grep tensorflow | wc -l) -ge 1 ]; then
    echo "tensorflow already available, so skipping..."
  else
    pip3 install tensorflow[and-cuda]
  fi
  echo "Installing torch"
  if [ $(pip3 list | grep torch | wc -l) -ge 1 ]; then
    echo "torch already available, so skipping..."
  else
    pip3 install torch torchvision torchaudio
  fi
  if [ $? -ne 0 ]; then
    echo "Python package installation failed"
    echo "Please do it manually"
  else
    echo "Python package installation completed"
    echo "Calling python script to verify tensorflow/torch installation"
    python3 verify_cuda_setup.py
  fi
}

args=$1
if [ $# -eq 0 ]; then
  echo "Starting CUDA/CUDNN Setup"
  cuda_install
  cudnn_install
  package_install
  verify_cudnn_install
  echo "Completed CUDA/CUDNN Setup"
else
  if [[ $args -eq 1 ]]; then
    echo "Starting the test"
    verify_cudnn_install
  elif [[ $args -eq 2 ]]; then
    echo "Starting Python setup"
    python_setup
  else
    echo "Unrecognized arg $arg"
    exit 1
  fi
fi
